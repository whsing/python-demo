#coding: utf-8
#!/usr/bin/env python
import queue
import threading
import time
import requests
import os, sys

# 定义同时处理任务数
queue = queue.Queue(maxsize=3)
start_count = 13
task_count = 13#2*60*60
path = 'e:\\python-file\\mp41\\'
thread_num = 50

# 生成任务列表
def taskList():
    task = []
    for i in range(start_count,task_count+1):
        task.append(str(i))
    return task


# 把任务放入队列中
class Producer(threading.Thread):
    def __init__(self, name, queue):
        self.__name = name
        self.__queue = queue
        super(Producer, self).__init__()

    def run(self):
        for ip in taskList():
            self.__queue.put(ip)


# 线程处理任务
class Consumer(threading.Thread):
    def __init__(self, name, queue):
        self.__name = name
        self.__queue = queue
        super(Consumer, self).__init__()

    def run(self):
        while True:
            ip = self.__queue.get()
            #print ('Consumer name: %s' % (self.__name))
            #consumer_process(ip)
            file_name = 'index'+ip+'.ts'
            if os.path.isfile(path+file_name) and os.path.getsize(path+file_name) != 0:
                print("文件存在："+path+file_name)
            else:
                download('https://cdn.fp75.com/avid5dccda3cbc281/'+file_name,path,file_name)
            self.__queue.task_done()

def download(url, path, file_name):
    #url_start = 'https://pic.ibaotu.com/00/51/34/88a888piCbRB.mp4'
    #url_st2art = 'https://cdn.fp75.com/avid5dccda3cbc281/index'
    #url_e2nd = '.ts'
    #url = url_st3art + str(i) + url_end
    print("开始下载:"+url)
    r = requests.get(url, stream=True, timeout=100)

    if r.status_code == 200:
        with open(path+file_name, "wb") as mp4:
            for chunk in r.iter_content(chunk_size=1024 * 1024):
                if chunk:
                    mp4.write(chunk)
        print("下载成功:" + url)
    else:
        print('错误' + str(r.status_code) + ':' + url)

def consumer_process(ip):
    time.sleep(1)
    print (ip)


def startConsumer(thread_num):
    t_consumer = []
    for i in range(thread_num):
        c = Consumer(i, queue)
        c.setDaemon(True)
        c.start()
        t_consumer.append(c)
    return t_consumer

def main():
    p = Producer("Producer task0", queue)
    p.setDaemon(True)
    p.start()
    startConsumer(thread_num)

    # 确保所有的任务都生成
    p.join()

    # 等待处理完所有任务
    queue.join()



if __name__ == '__main__':
    main()
    print ('------end-------')